// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/fahmyabdul/gits-assignments/test-3/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// UsecaseAuthor is an autogenerated mock type for the UsecaseAuthor type
type UsecaseAuthor struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, request
func (_m *UsecaseAuthor) Create(ctx context.Context, request *entity.Author) error {
	ret := _m.Called(ctx, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Author) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *UsecaseAuthor) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchAll provides a mock function with given fields: ctx
func (_m *UsecaseAuthor) FetchAll(ctx context.Context) ([]*entity.Author, error) {
	ret := _m.Called(ctx)

	var r0 []*entity.Author
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Author); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Author)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchById provides a mock function with given fields: ctx, id
func (_m *UsecaseAuthor) FetchById(ctx context.Context, id int) (*entity.Author, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Author
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.Author); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Author)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchByName provides a mock function with given fields: ctx, name
func (_m *UsecaseAuthor) FetchByName(ctx context.Context, name string) ([]*entity.Author, error) {
	ret := _m.Called(ctx, name)

	var r0 []*entity.Author
	if rf, ok := ret.Get(0).(func(context.Context, string) []*entity.Author); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Author)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, request
func (_m *UsecaseAuthor) Update(ctx context.Context, id int, request *entity.Author) error {
	ret := _m.Called(ctx, id, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *entity.Author) error); ok {
		r0 = rf(ctx, id, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUsecaseAuthor interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsecaseAuthor creates a new instance of UsecaseAuthor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsecaseAuthor(t mockConstructorTestingTNewUsecaseAuthor) *UsecaseAuthor {
	mock := &UsecaseAuthor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
