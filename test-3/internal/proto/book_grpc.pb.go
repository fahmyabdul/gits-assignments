// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: internal/proto/book.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookServiceClient is the client API for BookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookServiceClient interface {
	CreateBook(ctx context.Context, in *BookCreateRequest, opts ...grpc.CallOption) (*BookCreateResponse, error)
	FetchByIdBook(ctx context.Context, in *BookFetchByIdRequest, opts ...grpc.CallOption) (*BookFetchByIdResponse, error)
	FetchByNameBook(ctx context.Context, in *BookFetchByNameRequest, opts ...grpc.CallOption) (*BookFetchByNameResponse, error)
	FetchAllBook(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BookFetchAllResponse, error)
	UpdateBook(ctx context.Context, in *BookUpdateRequest, opts ...grpc.CallOption) (*BookUpdateResponse, error)
	DeleteBook(ctx context.Context, in *BookDeleteRequest, opts ...grpc.CallOption) (*BookDeleteResponse, error)
	FetchByAuthorId(ctx context.Context, in *BookFetchByAuthorIdRequest, opts ...grpc.CallOption) (*BookFetchByAuthorIdResponse, error)
}

type bookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookServiceClient(cc grpc.ClientConnInterface) BookServiceClient {
	return &bookServiceClient{cc}
}

func (c *bookServiceClient) CreateBook(ctx context.Context, in *BookCreateRequest, opts ...grpc.CallOption) (*BookCreateResponse, error) {
	out := new(BookCreateResponse)
	err := c.cc.Invoke(ctx, "/book.BookService/CreateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) FetchByIdBook(ctx context.Context, in *BookFetchByIdRequest, opts ...grpc.CallOption) (*BookFetchByIdResponse, error) {
	out := new(BookFetchByIdResponse)
	err := c.cc.Invoke(ctx, "/book.BookService/FetchByIdBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) FetchByNameBook(ctx context.Context, in *BookFetchByNameRequest, opts ...grpc.CallOption) (*BookFetchByNameResponse, error) {
	out := new(BookFetchByNameResponse)
	err := c.cc.Invoke(ctx, "/book.BookService/FetchByNameBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) FetchAllBook(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BookFetchAllResponse, error) {
	out := new(BookFetchAllResponse)
	err := c.cc.Invoke(ctx, "/book.BookService/FetchAllBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) UpdateBook(ctx context.Context, in *BookUpdateRequest, opts ...grpc.CallOption) (*BookUpdateResponse, error) {
	out := new(BookUpdateResponse)
	err := c.cc.Invoke(ctx, "/book.BookService/UpdateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) DeleteBook(ctx context.Context, in *BookDeleteRequest, opts ...grpc.CallOption) (*BookDeleteResponse, error) {
	out := new(BookDeleteResponse)
	err := c.cc.Invoke(ctx, "/book.BookService/DeleteBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) FetchByAuthorId(ctx context.Context, in *BookFetchByAuthorIdRequest, opts ...grpc.CallOption) (*BookFetchByAuthorIdResponse, error) {
	out := new(BookFetchByAuthorIdResponse)
	err := c.cc.Invoke(ctx, "/book.BookService/FetchByAuthorId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookServiceServer is the server API for BookService service.
// All implementations must embed UnimplementedBookServiceServer
// for forward compatibility
type BookServiceServer interface {
	CreateBook(context.Context, *BookCreateRequest) (*BookCreateResponse, error)
	FetchByIdBook(context.Context, *BookFetchByIdRequest) (*BookFetchByIdResponse, error)
	FetchByNameBook(context.Context, *BookFetchByNameRequest) (*BookFetchByNameResponse, error)
	FetchAllBook(context.Context, *emptypb.Empty) (*BookFetchAllResponse, error)
	UpdateBook(context.Context, *BookUpdateRequest) (*BookUpdateResponse, error)
	DeleteBook(context.Context, *BookDeleteRequest) (*BookDeleteResponse, error)
	FetchByAuthorId(context.Context, *BookFetchByAuthorIdRequest) (*BookFetchByAuthorIdResponse, error)
	mustEmbedUnimplementedBookServiceServer()
}

// UnimplementedBookServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookServiceServer struct {
}

func (UnimplementedBookServiceServer) CreateBook(context.Context, *BookCreateRequest) (*BookCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedBookServiceServer) FetchByIdBook(context.Context, *BookFetchByIdRequest) (*BookFetchByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchByIdBook not implemented")
}
func (UnimplementedBookServiceServer) FetchByNameBook(context.Context, *BookFetchByNameRequest) (*BookFetchByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchByNameBook not implemented")
}
func (UnimplementedBookServiceServer) FetchAllBook(context.Context, *emptypb.Empty) (*BookFetchAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAllBook not implemented")
}
func (UnimplementedBookServiceServer) UpdateBook(context.Context, *BookUpdateRequest) (*BookUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBook not implemented")
}
func (UnimplementedBookServiceServer) DeleteBook(context.Context, *BookDeleteRequest) (*BookDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBook not implemented")
}
func (UnimplementedBookServiceServer) FetchByAuthorId(context.Context, *BookFetchByAuthorIdRequest) (*BookFetchByAuthorIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchByAuthorId not implemented")
}
func (UnimplementedBookServiceServer) mustEmbedUnimplementedBookServiceServer() {}

// UnsafeBookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookServiceServer will
// result in compilation errors.
type UnsafeBookServiceServer interface {
	mustEmbedUnimplementedBookServiceServer()
}

func RegisterBookServiceServer(s grpc.ServiceRegistrar, srv BookServiceServer) {
	s.RegisterService(&BookService_ServiceDesc, srv)
}

func _BookService_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.BookService/CreateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).CreateBook(ctx, req.(*BookCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_FetchByIdBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookFetchByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).FetchByIdBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.BookService/FetchByIdBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).FetchByIdBook(ctx, req.(*BookFetchByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_FetchByNameBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookFetchByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).FetchByNameBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.BookService/FetchByNameBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).FetchByNameBook(ctx, req.(*BookFetchByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_FetchAllBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).FetchAllBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.BookService/FetchAllBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).FetchAllBook(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_UpdateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).UpdateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.BookService/UpdateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).UpdateBook(ctx, req.(*BookUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_DeleteBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).DeleteBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.BookService/DeleteBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).DeleteBook(ctx, req.(*BookDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_FetchByAuthorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookFetchByAuthorIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).FetchByAuthorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.BookService/FetchByAuthorId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).FetchByAuthorId(ctx, req.(*BookFetchByAuthorIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookService_ServiceDesc is the grpc.ServiceDesc for BookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "book.BookService",
	HandlerType: (*BookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBook",
			Handler:    _BookService_CreateBook_Handler,
		},
		{
			MethodName: "FetchByIdBook",
			Handler:    _BookService_FetchByIdBook_Handler,
		},
		{
			MethodName: "FetchByNameBook",
			Handler:    _BookService_FetchByNameBook_Handler,
		},
		{
			MethodName: "FetchAllBook",
			Handler:    _BookService_FetchAllBook_Handler,
		},
		{
			MethodName: "UpdateBook",
			Handler:    _BookService_UpdateBook_Handler,
		},
		{
			MethodName: "DeleteBook",
			Handler:    _BookService_DeleteBook_Handler,
		},
		{
			MethodName: "FetchByAuthorId",
			Handler:    _BookService_FetchByAuthorId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/book.proto",
}
