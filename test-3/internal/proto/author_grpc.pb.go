// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: internal/proto/author.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorServiceClient is the client API for AuthorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorServiceClient interface {
	CreateAuthor(ctx context.Context, in *AuthorCreateRequest, opts ...grpc.CallOption) (*AuthorCreateResponse, error)
	FetchByIdAuthor(ctx context.Context, in *AuthorFetchByIdRequest, opts ...grpc.CallOption) (*AuthorFetchByIdResponse, error)
	FetchByNameAuthor(ctx context.Context, in *AuthorFetchByNameRequest, opts ...grpc.CallOption) (*AuthorFetchByNameResponse, error)
	FetchAllAuthor(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AuthorFetchAllResponse, error)
	UpdateAuthor(ctx context.Context, in *AuthorUpdateRequest, opts ...grpc.CallOption) (*AuthorUpdateResponse, error)
	DeleteAuthor(ctx context.Context, in *AuthorDeleteRequest, opts ...grpc.CallOption) (*AuthorDeleteResponse, error)
}

type authorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorServiceClient(cc grpc.ClientConnInterface) AuthorServiceClient {
	return &authorServiceClient{cc}
}

func (c *authorServiceClient) CreateAuthor(ctx context.Context, in *AuthorCreateRequest, opts ...grpc.CallOption) (*AuthorCreateResponse, error) {
	out := new(AuthorCreateResponse)
	err := c.cc.Invoke(ctx, "/author.AuthorService/CreateAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServiceClient) FetchByIdAuthor(ctx context.Context, in *AuthorFetchByIdRequest, opts ...grpc.CallOption) (*AuthorFetchByIdResponse, error) {
	out := new(AuthorFetchByIdResponse)
	err := c.cc.Invoke(ctx, "/author.AuthorService/FetchByIdAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServiceClient) FetchByNameAuthor(ctx context.Context, in *AuthorFetchByNameRequest, opts ...grpc.CallOption) (*AuthorFetchByNameResponse, error) {
	out := new(AuthorFetchByNameResponse)
	err := c.cc.Invoke(ctx, "/author.AuthorService/FetchByNameAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServiceClient) FetchAllAuthor(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AuthorFetchAllResponse, error) {
	out := new(AuthorFetchAllResponse)
	err := c.cc.Invoke(ctx, "/author.AuthorService/FetchAllAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServiceClient) UpdateAuthor(ctx context.Context, in *AuthorUpdateRequest, opts ...grpc.CallOption) (*AuthorUpdateResponse, error) {
	out := new(AuthorUpdateResponse)
	err := c.cc.Invoke(ctx, "/author.AuthorService/UpdateAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServiceClient) DeleteAuthor(ctx context.Context, in *AuthorDeleteRequest, opts ...grpc.CallOption) (*AuthorDeleteResponse, error) {
	out := new(AuthorDeleteResponse)
	err := c.cc.Invoke(ctx, "/author.AuthorService/DeleteAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorServiceServer is the server API for AuthorService service.
// All implementations must embed UnimplementedAuthorServiceServer
// for forward compatibility
type AuthorServiceServer interface {
	CreateAuthor(context.Context, *AuthorCreateRequest) (*AuthorCreateResponse, error)
	FetchByIdAuthor(context.Context, *AuthorFetchByIdRequest) (*AuthorFetchByIdResponse, error)
	FetchByNameAuthor(context.Context, *AuthorFetchByNameRequest) (*AuthorFetchByNameResponse, error)
	FetchAllAuthor(context.Context, *emptypb.Empty) (*AuthorFetchAllResponse, error)
	UpdateAuthor(context.Context, *AuthorUpdateRequest) (*AuthorUpdateResponse, error)
	DeleteAuthor(context.Context, *AuthorDeleteRequest) (*AuthorDeleteResponse, error)
	mustEmbedUnimplementedAuthorServiceServer()
}

// UnimplementedAuthorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorServiceServer struct {
}

func (UnimplementedAuthorServiceServer) CreateAuthor(context.Context, *AuthorCreateRequest) (*AuthorCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthor not implemented")
}
func (UnimplementedAuthorServiceServer) FetchByIdAuthor(context.Context, *AuthorFetchByIdRequest) (*AuthorFetchByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchByIdAuthor not implemented")
}
func (UnimplementedAuthorServiceServer) FetchByNameAuthor(context.Context, *AuthorFetchByNameRequest) (*AuthorFetchByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchByNameAuthor not implemented")
}
func (UnimplementedAuthorServiceServer) FetchAllAuthor(context.Context, *emptypb.Empty) (*AuthorFetchAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAllAuthor not implemented")
}
func (UnimplementedAuthorServiceServer) UpdateAuthor(context.Context, *AuthorUpdateRequest) (*AuthorUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthor not implemented")
}
func (UnimplementedAuthorServiceServer) DeleteAuthor(context.Context, *AuthorDeleteRequest) (*AuthorDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthor not implemented")
}
func (UnimplementedAuthorServiceServer) mustEmbedUnimplementedAuthorServiceServer() {}

// UnsafeAuthorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorServiceServer will
// result in compilation errors.
type UnsafeAuthorServiceServer interface {
	mustEmbedUnimplementedAuthorServiceServer()
}

func RegisterAuthorServiceServer(s grpc.ServiceRegistrar, srv AuthorServiceServer) {
	s.RegisterService(&AuthorService_ServiceDesc, srv)
}

func _AuthorService_CreateAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).CreateAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/author.AuthorService/CreateAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).CreateAuthor(ctx, req.(*AuthorCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorService_FetchByIdAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorFetchByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).FetchByIdAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/author.AuthorService/FetchByIdAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).FetchByIdAuthor(ctx, req.(*AuthorFetchByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorService_FetchByNameAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorFetchByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).FetchByNameAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/author.AuthorService/FetchByNameAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).FetchByNameAuthor(ctx, req.(*AuthorFetchByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorService_FetchAllAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).FetchAllAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/author.AuthorService/FetchAllAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).FetchAllAuthor(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorService_UpdateAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).UpdateAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/author.AuthorService/UpdateAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).UpdateAuthor(ctx, req.(*AuthorUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorService_DeleteAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).DeleteAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/author.AuthorService/DeleteAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).DeleteAuthor(ctx, req.(*AuthorDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorService_ServiceDesc is the grpc.ServiceDesc for AuthorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "author.AuthorService",
	HandlerType: (*AuthorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAuthor",
			Handler:    _AuthorService_CreateAuthor_Handler,
		},
		{
			MethodName: "FetchByIdAuthor",
			Handler:    _AuthorService_FetchByIdAuthor_Handler,
		},
		{
			MethodName: "FetchByNameAuthor",
			Handler:    _AuthorService_FetchByNameAuthor_Handler,
		},
		{
			MethodName: "FetchAllAuthor",
			Handler:    _AuthorService_FetchAllAuthor_Handler,
		},
		{
			MethodName: "UpdateAuthor",
			Handler:    _AuthorService_UpdateAuthor_Handler,
		},
		{
			MethodName: "DeleteAuthor",
			Handler:    _AuthorService_DeleteAuthor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/author.proto",
}
